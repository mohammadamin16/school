{"version":3,"sources":["api/api.js","screens/login_screen/index.js","screens/login_screen/LoginScreen.js","screens/home_screen/index.js","screens/home_screen/HomeScreen.js","screens/signup_screen/index.js","screens/signup_screen/SignupScreen.js","component/table/index.js","component/table/Table.js","screens/dashboard_screen/DashboardScreen.js","screens/dashboard_screen/index.js","App.js","serviceWorker.js","index.js"],"names":["url","LoginScreen","props","_this","Object","classCallCheck","this","_super","call","on_click","json","set_user","alert","input_change","input","type","setState","username","password","state","_this2","react_default","a","createElement","className","placeholder","onChange","target","value","onClick","on_response","axios","post","then","response","catch","error","console","log","Component","HomeScreen","SignupScreen","name","Table","_useState","useState","date","col1","col2","del_col","_useState2","slicedToArray","source","rows","_loop","i","push","length","DashboardScreen","user","table","App","login","localStorage","setItem","JSON","stringify","logout","removeItem","parse","getItem","react_router_dom","react_router","exact","path","to","login_screen","component","render","dashboard_screen","Boolean","window","location","hostname","match","ReactDOM","StrictMode","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8d56b34a.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst url = 'http://localhost:8000';\n\nexport function login(username, password, on_response) {\n    axios.post(url + '/accounts/login', {\n        username:username,\n        password:password,\n    })\n    .then(function (response) {\n        let json = response['data'];\n        on_response(json);\n    })\n    .catch(function (error) {\n        console.log(error);\n    })\n}\n\n\nexport function signup(name, username, password, on_response) {\n    axios.post(url + '/accounts/signup', {\n        name:name,\n        username:username,\n        password:password,\n    })\n    .then(function (response) {\n        let json = response['data'];\n        on_response(json);\n    })\n    .catch(function (error) {\n        console.log(error);\n    })\n}\n\n","import LoginScreen from './LoginScreen'\n\nexport default LoginScreen;\n","import React, {Component} from 'react';\n\nimport './styles.css'\nimport { login } from '../../api/api'\n\nclass LoginScreen extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n        };\n    }\n\n    on_click = (json) => {\n        if (json['success']) {\n            this.props.set_user(json['data']['user']);\n\n            } else{\n            alert(json['msg'])\n        }\n    };\n    input_change = (input, type) => {\n        switch (type) {\n            case 'username':\n                this.setState({username:input});\n                break;\n            case 'password':\n                this.setState({password:input});\n                break;\n            default:\n                break;\n        }\n    };\n    render() {\n        return(\n            <div className={'login_screen'}>\n                <p className={'title'}>LoginScreen</p>\n\n                <div className='form'>\n                        <input\n                            className='input'\n                            placeholder='username'\n                            onChange={(input) => {this.input_change(input.target.value, 'username')}}\n                        />\n                        <input\n                            className='input'\n                            placeholder='password'\n\n                            onChange={(input) => {this.input_change(input.target.value, 'password')}}\n                        />\n\n                        <div\n                            className='submit_btn'\n                            onClick={() => {\n                                login(this.state.username, this.state.password, this.on_click)\n                            }}>\n                            <p>Login</p>\n                        </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nexport default LoginScreen;\n","import HomeScreen from './HomeScreen'\n\nexport default HomeScreen;\n","import React, {Component} from 'react';\n\nimport './styles.css'\n\nclass HomeScreen extends Component{\n    render() {\n        return(\n            <div className='home_screen'>\n                <p className='title'>HomeScreen</p>\n\n\n            </div>\n        )\n    }\n}\n\n\n\nexport default HomeScreen;\n","import SignupScreen from './SignupScreen'\n\nexport default SignupScreen;\n","import React, {Component} from 'react';\n\nimport './styles.css'\nimport { signup } from '../../api/api'\n\nclass SignupScreen extends Component{\n    state={\n        name:'',\n        username:'',\n        password:'',\n    };\n    on_click = (json) => {\n        if (json['success']) {\n            console.log(json['data']);\n            alert(json['msg'])\n        } else{\n            alert(json['msg'])\n        }\n    };\n    input_change = (input, type) => {\n        switch (type) {\n            case 'name':\n                this.setState({name:input});\n                break;\n            case 'username':\n                this.setState({username:input});\n                break;\n            case 'password':\n                this.setState({password:input});\n                break;\n            default:\n                break;\n        }\n    };\n    render() {\n        return(\n            <div className={'login_screen'}>\n                <p className={'title'}>SignupScreen</p>\n\n                <div className='form'>\n                    <input\n                        className='input'\n                        placeholder='full name'\n                        onChange={(input) => {this.input_change(input.target.value, 'name')}}\n                    />\n                    <input\n                        className='input'\n                        placeholder='username'\n                        onChange={(input) => {this.input_change(input.target.value, 'username')}}\n                    />\n                    <input\n                        className='input'\n                        placeholder='password'\n\n                        onChange={(input) => {this.input_change(input.target.value, 'password')}}\n                    />\n\n                    <div\n                        className='submit_btn'\n                        onClick={() => {\n                            signup(this.state.name, this.state.username, this.state.password, this.on_click)\n                        }}>\n                        <p>Login</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nexport default SignupScreen;\n","import Table from \"./Table\";\n\nexport default Table;","import React, {useState} from 'react';\nimport './styles.css'\nimport Row from './Row'\n\nexport default function Table(props) {\n    const data =\n        [\n            {\n                date: 'Sunday',\n                col1: 'Hello',\n                col2: 'World',\n                del_col:null,\n            },\n            {\n                date: 'Friday',\n                col1: 'Hi',\n                col2: 'Jahan',\n                del_col:null,\n            },\n            {\n                date: 'FRIDAY2',\n                col1: 'SALAM',\n                col2: 'TESTING',\n                del_col:null,\n            },\n            {\n                date:'Monday',\n                col1: 'react-table',\n                col2: 'rocks',\n                del_col:null,\n            },\n            {\n                date:'Tuesday',\n                col1: 'whatever',\n                col2: 'you want',\n                del_col:null,\n            }\n        ];\n\n    const [ source, setSource] = useState(data);\n\n    let rows = [];\n    for (let i=0; i < source.length; i++){\n        rows.push(\n            <tr className='row'>\n                <td className='cell light-hover'>{source[i]['date']}</td>\n                <td className='cell light-hover'>{source[i]['col1']}</td>\n                <td className='cell light-hover'>{source[i]['col2']}</td>\n                <td className='cell light-hover'\n                    onClick={() => {\n\n                        console.log(i);\n                    }}\n\n                >Del</td>\n            </tr>\n        )\n    }\n\n    return (\n        <table className='table'>\n            <thead>\n                <tr className='row' >\n                    <th className='cell header'>Date</th>\n                    <th className='cell header'>Desc. 1</th>\n                    <th className='cell header'>Desc. 2</th>\n                    <th className='cell header'>Del</th>\n                </tr>\n            </thead>\n            {rows}\n        </table>\n        )\n\n\n\n\n}","import React from 'react';\n\nimport './styles.css'\n//import Component\nimport Table from '../../component/table/index';\n\nfunction DashboardScreen(props) {\n    return(\n        <div className='dashboard_screen' >\n            <p className='title' >\n                Welcome {props.user.name}\n            </p>\n\n            <Table/>\n\n\n\n\n        </div>\n    )\n}\n\n\n\nexport default DashboardScreen;\n","import DashboardScreen from './DashboardScreen'\n\nexport default DashboardScreen;\n","import React, {Component} from 'react';\n\nimport './App.css';\n\nimport {BrowserRouter, Route, Redirect} from 'react-router-dom';\n\nimport LoginScreen from './screens/login_screen'\nimport HomeScreen from './screens/home_screen'\nimport SignupScreen from './screens/signup_screen'\nimport DashboardScreen from './screens/dashboard_screen'\n\nexport default class App extends Component {\n\t constructor(props){\n                super(props);\n                this.state = {\n                        user:JSON.parse(localStorage.getItem('user')),\n                };\n\n        }\n\n\tlogin = (user) => {\n\t\tlocalStorage.setItem('user', JSON.stringify(user));\n\t\tthis.setState({\n            user:user,\n\t\t});\n\t};\n\tlogout = () => {\n\t\tlocalStorage.removeItem('user');\n\t\tthis.setState({user:null})\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<Route exact path='/login' >\n\t\t\t\t\t\t{this.state.user ?\n\t\t\t\t\t\t\t<Redirect push to={'/dashboard'}/>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<LoginScreen set_user={this.login} />}\n                    </Route>\n\n\t\t\t\t\t<Route exact path='/signup' component={SignupScreen}/>\n\t\t\t\t\t<Route exact path='/dashboard' >\n\t\t\t\t\t\t{!this.state.user ?\n\t\t\t\t\t\t\t<Redirect push to={'/login'}/>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t<Route exact path='/dashboard' render=\t{() => (\n\t\t\t\t\t\t<DashboardScreen\n\t\t\t\t\t\t\tuser={this.state.user}\n\t\t\t\t\t\t\tlogout={this.logout}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}/>\n\n\t\t\t\t\t\t}\n                    </Route>\n\n\n\t\t\t\t\t<Route exact path='/' component={HomeScreen}/>\n\n\n\t\t\t\t</BrowserRouter>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}